/*
Bashicu Matrix System v4, implemented as Pointer Matrix System
Runs for >(0,0,0,0,0)(1,1,1,1,1)[5] steps
*/

/* List2 utilities */

func concat(matrix, extension, i){
	/* Concatenates extension (a list2) onto the end of matrix (a list2).
	   Scratch memory: i (int) */
	i = 0;
	while(i < (#*extension)){
		matrix = matrix ^* (extension @* i);
		i = i + 1;
	}
	return;
}

func removeLast(matrix, i, new){
	/* Removes last column of matrix.
	   Scratch memory: i (int), new (list2) */
	i = 0;
	new = ::;
	while(i < (#*matrix - 1)){
		new = new ^* (matrix @* i);
		i = i + 1;
	}
	matrix = new;
	return;
}

func popFirst(output, matrix, i, new){
	/* Removes first column of matrix and stores in output.
	   Scratch memory: i (int), new (list2) */
	output = matrix @* 0;
	i = 1;
	new = ::;
	while(i < (#*matrix)){
		new = new ^* (matrix @* i);
		i = i + 1;
	}
	matrix = new;
	return;
}

/* PMS utilities */

func isZeros(output, col, i){
	/* Sets output to 1 iff col (a list) is all zeros
	   Scratch memory: i (int) */
	i = 0;
	while(i < #col){
		if((col@i) != 0){
			output = 0;
			return;
		}
		i = i + 1;
	}
	output = 1;
	return;
}

func isSucc(output, matrix, i, col){
	/* Scratch memory: i (int), col (list) */
	col = matrix @* ((#*matrix) - 1);
	isZeros(output, col, i);
	return;
}

func LNZ(output, matrix, i, col){
	col = matrix @* ((#*matrix) - 1);
	i = (#col) - 1;
	while(i >= 0){
		if((col@i) != 0){
			output = i;
			return;
		}
		i = i - 1;
	}
	return;
}

func lnzEntry(output, matrix, i, col){
	/* Sets output to the bottommost nonzero entry in the rightmost column of matrix.
	   Not to be confused with LNZ, which sets output to the row number and not the entry.
	   Scratch memory: i (int), col (list) */
	col = matrix @* ((#*matrix) - 1);
	i = (#col) - 1;
	while(i >= 0){
		if((col@i) != 0){
			output = col@i;
			return;
		}
		i = i - 1;
	}
	return;
}

func brColumnIndex(output, matrix, i, lnzEntry, col){
	/* Sets output to the int that is the index of matrix's bad root column.
	   Scratch memory: i (int), lnz (int), col (list) */
	lnzEntry(lnzEntry, matrix, i, col); /* Get entry in LNZ row of last column */
	output = ((#*matrix) - lnzEntry) - 1;
	return;
}

/* PMS functions */

func goodPart(output, matrix, brcolumnindex, i, lnzEntry, col){
	/* Sets output to the list2 that is the good part of matrix, also leaves the bad root column index in brColumnIndex.
	   Scratch memory: brcolumnindex (int), i (int), lnzEntry (int), col (list) */
	brColumnIndex(brcolumnindex, matrix, i, lnzEntry, col);
	output = ::;
	i = 0;
	while(i < brcolumnindex){
		output = output ^* (matrix @* i);
		i = i + 1;
	}
	return;
}

func badPart(output, cut, matrix, i, j, lnzEntry, col){
	/* Sets output to the list2 that is the bad part of matrix, and stores the cut column in cut.
	   Scratch memory: i (int), j (int), lnzEntry (int), col (list) */
	brColumnIndex(i, matrix, j, lnzEntry, col);
	output = ::;
	while(i < (#*matrix) - 1){
		output = output ^* (matrix @* i);
		i = i + 1;
	}
	cut = matrix @* i;
	return;
}

func expand(matrix, n, scratch1, brColumnIndex, lnz, delta, i, x, y, col, cut, new, bad, newBad, scratchL2){	
	/* Expands matrix to n.
	   Puts the output in new, then sets matrix to new.
	   Scratch memory: ints: scratch1, brColumnIndex, lnz, delta, i, x, y. lists: col, cut. list2s: new, bad, newBad, scratchL2 */
	isSucc(scratch1, matrix, i, col);
	ifelse(scratch1){
		removeLast(new, matrix, i);
		matrix = new;
		return;
	}{
		/* Expansion for non-successor matrices (PMS) */
		
		LNZ(lnz, matrix, i, col);
		goodPart(new, matrix, brColumnIndex, i, delta, col); /* Start with good part. brColumnIndex is not scratch, it's used later. Scratch: i, delta. */
		badPart(bad, cut, matrix, i, scratch1, delta, col); /* Scratch: scratch1, delta. scratch1 now no longer needs to store output of isSucc and can be used for scratch */
		delta = #*bad; /* Length of bad part */
		
		i = 0;
		while(i <= n){
			concat(new, bad, scratch1);
			newBad = ::;
			
			/* New value of bad for next loop (ascending)
			   col is the column currently being worked on
			   cut is the cut rightmost column
			   scratch1 stores the (x,y)th entry of bad so that it's accessed once */
			x = 0;
			while(x < delta){
				col = [];
				y = 0;
				while(y < #(bad @* 0)){
					scratch1 = (bad @* x) @ y;
					ifelse(x == 0){ /* Bad root */
						ifelse(y < lnz){ /* Everything in bad root above lnz */
							col = col ^ (cut @ y);
						}{
							ifelse(scratch1 != 0){
								col = col ^ (scratch1 + delta); /* Parent is in good part */
							}{
								col = col ^ 0; /* No parent */
							}
						}
					}{ /* Not bad root */
						ifelse(scratch1 > x){ /* Is parent in good part? */
							/* TODO: Does this handle 0s properly? Come up with an example to test this */
							col = col ^ (scratch1 + delta);
						}{
							col = col ^ scratch1; /* No change from previous copy of bad */
						}
					}
					y = y + 1;
				}
				newBad = newBad ^* col;
				x = x + 1;
			}
						
			bad = newBad;
			
			i = i + 1;
		}
		matrix = new;
	}
	
	return;
}

/* Main routine */

int n;
list2 matrix;
int scratch1;
int brColumnIndex;
int lnz;
int delta;
int i;
int x;
int y;
list col;
list cut;
list2 new;
list2 bad;
list2 newBad;
list2 scratchL2;

n = 5;
/* Good test case: matrix = :[0,0,0], [1,1,1], [1,1,1], [1,3,3], [3,3,3], [1,0,0], [5,5,5]:; */
matrix = :[0,0,0,0,0], [1,1,1,1,1]:;

new = ::;

while(#*matrix > 1){ /* Loop until matrix is one column of 0s */
	print matrix;
	expand(matrix, n, scratch1, brColumnIndex, lnz, delta, i, x, y, col, cut, new, bad, newBad, scratchL2);
	n = n + 1;
}

halt;
